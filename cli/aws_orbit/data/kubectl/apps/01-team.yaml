kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ebs-${team}-gp2
provisioner: kubernetes.io/aws-ebs
allowVolumeExpansion: true
reclaimPolicy: Delete
parameters:
  type: gp2
  fsType: ext4
  encrypted: "true"
  kmsKeyId: ${team_kms_key_arn}
volumeBindingMode: Immediate
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: jupyterhub
    efs-id: ${efsid}
  name: jupyterhub-${team}
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 5Gi
  csi:
    driver: efs.csi.aws.com
    volumeHandle: ${efsid}::${efsapid}
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-storage-class
  volumeMode: Filesystem
---
apiVersion: v1
kind: Namespace
metadata:
  name: ${team}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyterhub
  namespace: ${team}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: efs-storage-class
  volumeName: jupyterhub-${team}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    team: ${team}
  name: ${team}
  namespace: ${team}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${account_id}:role/orbit-${env_name}-${team}-role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: orbit-jupyterhub
  name: jupyterhub
  namespace: ${team}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - persistentvolumeclaims
    verbs:
      - get
      - watch
      - list
      - create
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: orbit-jupyterhub
  name: jupyterhub
  namespace: ${team}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jupyterhub
subjects:
  - kind: ServiceAccount
    name: ${team}
    namespace: ${team}
---
apiVersion: vpcresources.k8s.aws/v1beta1
kind: SecurityGroupPolicy
metadata:
  name: ${team}-security-group-policy
  namespace: ${team}
spec:
  podSelector:
    matchLabels:
      orbit/attach-security-group: "yes"
  securityGroups:
    groupIds:
      - ${team_security_group_id}
---
apiVersion: vpcresources.k8s.aws/v1beta1
kind: SecurityGroupPolicy
metadata:
  name: cluster-pod-security-group-policy
  namespace: ${team}
spec:
  podSelector:
    matchLabels:
      orbit/node-type: ec2
  securityGroups:
    groupIds:
      - ${cluster_pod_security_group_id}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: orbit-jupyterhub
  name: jupyterhub-private
  namespace: ${team}
spec:
  ports:
    - port: 8081
      protocol: TCP
      targetPort: 8081
  selector:
    app: orbit-jupyterhub
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: orbit-jupyterhub
  name: jupyterhub-api
  namespace: ${team}
spec:
  ports:
    - port: 8001
      protocol: TCP
      targetPort: 8001
  selector:
    app: orbit-jupyterhub
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: orbit-jupyterhub
  name: jupyterhub-public
  namespace: ${team}
  annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: ${internal_load_balancer}
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8000
  selector:
    app: orbit-jupyterhub
  type: LoadBalancer
  loadBalancerSourceRanges: ${jupyterhub_inbound_ranges}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: orbit-jupyterhub
  name: jupyterhub
  namespace: ${team}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orbit-jupyterhub
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: orbit-jupyterhub
        orbit/node-type: ec2
        orbit/attach-security-group: "yes"
      name: jupyterhub
    spec:
      containers:
        - image: ${account_id}.dkr.ecr.${region}.amazonaws.com/orbit-${env_name}-jupyter-hub:${tag}
          env:
            - name: AWS_DEFAULT_REGION
              value: ${region}
            - name: ENV_NAME
              value: ${env_name}
            - name: TEAM
              value: ${team}
            - name: GRANT_SUDO
              value: ${grant_sudo}
            - name: AWS_STS_REGIONAL_ENDPOINTS
              value: regional
          imagePullPolicy: Always
          name: container
          ports:
            - containerPort: 8080
            - containerPort: 8001
            - containerPort: 8081
          volumeMounts:
            - mountPath: /efs
              name: efs-volume
          resources:
            limits:
              cpu: "2"
              memory: "3G"
            requests:
              cpu: "2"
              memory: "3G"
      nodeSelector:
        orbit/usage: teams
        orbit/node-type: ec2
      serviceAccountName: ${team}
      securityContext:
        fsGroup: 100
      volumes:
        - name: efs-volume
          persistentVolumeClaim:
            claimName: jupyterhub
---
apiVersion: batch/v1
kind: Job
metadata:
  name: efs-init-${team}
  namespace: ${team}
  labels:
    app: orbit-jupyterhub
    volume: ${efsid}
    job-name: efs-init-${team}
spec:
  template:
    metadata:
      labels:
        orbit/node-type: ec2
        orbit/attach-security-group: "yes"
    spec:
      nodeSelector:
        orbit/usage: teams
        orbit/node-type: ec2
      serviceAccountName: ${team}
      containers:
      - name: run-efs-init
        securityContext:
          runAsUser: 0
        imagePullPolicy: Always
        image: ${account_id}.dkr.ecr.${region}.amazonaws.com/orbit-${env_name}-jupyter-user:${tag}
        command: ["/bin/bash"]
        args:
          - -c
          - >-
            sudo chmod 777 /efs &&
            ls -ld /efs
        volumeMounts:
          - mountPath: /efs
            name: efs-volume
      volumes:
        - name: efs-volume
          persistentVolumeClaim:
            claimName: jupyterhub
      restartPolicy: Never
