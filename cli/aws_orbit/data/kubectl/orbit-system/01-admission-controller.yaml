---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admission-controller-config
  namespace: orbit-system
data:
  FLASK_DEBUG: "1"
  FLASK_ENV: development
  GUNICORN_WORKERS: "1"
  ADMISSION_CONTROLLER_DEBUG: "1"
  IN_CLUSTER_DEPLOYMENT: "1"
  NAMESPACE_WATCHER_WORKERS: "1"
  POD_SETTINGS_WATCHER_WORKERS: "1"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admission-controller-state
  namespace: orbit-system
data: {}
---
kind: Service
apiVersion: v1
metadata:
  name: podsettings-applicator
  namespace: orbit-system
spec:
  selector:
    app: podsettings-applicator
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
---
kind: MutatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1beta1
metadata:
  name: orbit-podsettings-applicator
webhooks:
  - name: podsettings-applicator.orbit-system.svc
    sideEffects: None
    reinvocationPolicy: IfNeeded
    failurePolicy: Fail
    matchPolicy: Equivalent
    namespaceSelector:
      matchExpressions:
        - key: orbit/space
          operator: In
          values:
            - team
            - user
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    clientConfig:
      caBundle: ""
      service:
        namespace: orbit-system
        name: podsettings-applicator
        path: /pod
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: admission-controller
  namespace: orbit-system
  name: podsettings-applicator
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: podsettings-applicator
  selector:
    matchLabels:
      app: podsettings-applicator
  template:
    metadata:
      labels:
        app: podsettings-applicator
      name: podsettings-applicator
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: orbit-${env_name}-admin
      containers:
        - name: webhook
          image: ${admission_controller_image}
          imagePullPolicy: ${image_pull_policy}
          ports:
            - containerPort: 443
              name: https
              protocol: TCP
          envFrom:
            - configMapRef:
                name: admission-controller-config
          command:
            - gunicorn
          args:
            - "--bind=0.0.0.0:443"
            - "--certfile=/certs/tls.crt"
            - "--keyfile=/certs/tls.key"
            - "--workers=$(GUNICORN_WORKERS)"
            - "--reload"
            - "aws_orbit_admission_controller.server:app"
          volumeMounts:
            - readOnly: true
              mountPath: /certs
              name: admission-controller-certs
            - mountPath: /state
              name: admission-controller-state
              readOnly: false
          readinessProbe:
            httpGet:
              path: /health
              scheme: HTTPS
              port: 443
            initialDelaySeconds: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              scheme: HTTPS
              port: 443
            initialDelaySeconds: 3
            periodSeconds: 5
          resources:
            limits:
              cpu: 2
              memory: 2G
            requests:
              cpu: 100m
              memory: 100M
      volumes:
        - name: admission-controller-certs
          secret:
            secretName: podsettings-applicator-certs
        - name: admission-controller-state
          configMap:
            name: admission-controller-state
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: admission-controller
  namespace: orbit-system
  name: namespace-watcher
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: ""
  selector:
    matchLabels:
      app: namespace-watcher
  template:
    metadata:
      labels:
        app: namespace-watcher
      name: namespace-watcher
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: orbit-${env_name}-admin
      containers:
        - name: watcher
          image: ${admission_controller_image}
          imagePullPolicy: ${image_pull_policy}
          envFrom:
            - configMapRef:
                name: admission-controller-config
          command:
            - admission-controller
            - watch
            - namespaces
          args:
            - "--workers=$(NAMESPACE_WATCHER_WORKERS)"
          volumeMounts:
            - mountPath: /state
              name: admission-controller-state
              readOnly: false
          resources:
            limits:
              cpu: 2
              memory: 2G
            requests:
              cpu: 100m
              memory: 100M
      volumes:
        - name: admission-controller-state
          configMap:
            name: admission-controller-state
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: admission-controller
  namespace: orbit-system
  name: podsettings-watcher
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: ""
  selector:
    matchLabels:
      app: podsettings-watcher
  template:
    metadata:
      labels:
        app: podsettings-watcher
      name: podsettings-watcher
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: orbit-${env_name}-admin
      containers:
        - name: watcher
          image: ${admission_controller_image}
          imagePullPolicy: ${image_pull_policy}
          envFrom:
            - configMapRef:
                name: admission-controller-config
          command:
            - admission-controller
            - watch
            - podsettings
          args:
            - "--workers=$(POD_SETTINGS_WATCHER_WORKERS)"
          volumeMounts:
            - mountPath: /state
              name: admission-controller-state
              readOnly: false
              cpu: 1
              memory: 1G
          resources:
            limits:
              cpu: 2
              memory: 2G
            requests:
              cpu: 100m
              memory: 100M
      volumes:
        - name: admission-controller-state
          configMap:
            name: admission-controller-state
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: landing-page
  namespace: orbit-system
  name: landing-page-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: landing-page-service
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: landing-page-service
      name: landing-page-service
    spec:
      serviceAccountName: orbit-${env_name}-admin
      containers:
        - name: webhook
          image: ${admission_controller_image}
          imagePullPolicy: ${image_pull_policy}
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: landing-page-config
          command:
            - gunicorn
          args:
            - "--bind=0.0.0.0:80"
            - "--workers=$(GUNICORN_WORKERS)"
            - "--reload"
            - "aws_orbit_admission_controller.server:app"
          readinessProbe:
            httpGet:
              path: /health
              scheme: HTTP
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              scheme: HTTP
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 5
          resources:
            limits:
              cpu: 2
              memory: 2G
            requests:
              cpu: 100m
              memory: 100M
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: landing-page-config
  namespace: orbit-system
data:
  FLASK_DEBUG: "1"
  FLASK_ENV: development
  GUNICORN_WORKERS: "1"
  ADMISSION_CONTROLLER_DEBUG: "1"
  IN_CLUSTER_DEPLOYMENT: "1"
  NAMESPACE_WATCHER_WORKERS: "1"
  COGNITO_USERPOOL_ID: ${cognitoUserPoolID}
  COGNITO_APP_CLIENT_ID: ${cognitoAppClientId}
  COGNITO_DOMAIN: ${cognitoUserPoolDomain}
  SSL_CERT: ${certArn}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: landing-page
  name: landing-page-service
  namespace: orbit-system
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
      name: ui
  selector:
    app: landing-page-service
  type: ClusterIP
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: orbit-landing-page
  namespace: kubeflow
  labels:
    app.kubernetes.io/component: orbit
    app.kubernetes.io/name: orbit-landing-page
spec:
  hosts:
  - "*"
  gateways:
  - kubeflow-gateway
  http:
  - match:
    - uri:
        prefix: /orbit/
    rewrite:
      uri: /
    route:
    - destination:
        host: landing-page-service.orbit-system.svc.cluster.local
        port:
          number: 80
